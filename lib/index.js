// Generated by CoffeeScript 1.7.1
var ALI_IMG_CMD, Cnt, HTTP_PREFIX, IS_JAVA_INSTALLED, JAR_ENTRY_POINT, JAR_SET_PATH, OSS_BUCKET, OssClient, START_AT, ZXIN_PATH, assert, copy, debuglog, decode, generateRandomFilename, init, oss, path, readResultFromStdout, url, _;

require('shelljs/global');

_ = require('underscore');

debuglog = require("debug")("zxing-oss-enhanced");

path = require('path');

oss = require('aliyun-oss');

url = require('url');

assert = require("assert");

IS_JAVA_INSTALLED = which('java');

START_AT = Date.now().toString(36);

ZXIN_PATH = path.join(__dirname, "..", "zxing");

JAR_SET_PATH = "" + (path.join(ZXIN_PATH, 'javase-3.3.0.jar')) + ":" + (path.join(ZXIN_PATH, 'jcommander-1.27.jar')) + ":" + (path.join(ZXIN_PATH, 'core-3.3.0.jar'));

JAR_ENTRY_POINT = "com.google.zxing.client.j2se.CommandLineRunner";

OssClient = null;

OSS_BUCKET = "";

HTTP_PREFIX = '';

ALI_IMG_CMD = "@500w_800h_100d.png";

init = function(options) {
  var ossOptions;
  assert(options, "missing options");
  assert(options.ossKey, "missing options.ossKey");
  assert(options.ossSecret, "missing options.ossSecret");
  assert(options.ossBucket, "missing options.ossBucket ");
  assert(options.ossPath, "missing options.ossPath");
  assert(options.httpPrefix, "missing options.httpPrefix");
  ossOptions = {
    accessKeyId: options.ossKey,
    accessKeySecret: options.ossSecret,
    host: options.ossRegion || 'oss-cn-hangzhou.aliyuncs.com'
  };
  OssClient = oss.createClient(ossOptions);
  OSS_BUCKET = options.ossBucket;
  HTTP_PREFIX = options.httpPrefix;
  ALI_IMG_CMD = options.aliImgCmd;
  debuglog('init ok');
};

Cnt = 0;

generateRandomFilename = function(basename) {
  return "" + (Date.now().toString(36)) + "_" + START_AT + "_" + (++Cnt) + (basename || '');
};

readResultFromStdout = function(stdout) {
  var i, line, lines, _i, _len;
  lines = stdout.split("\n");
  for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
    line = lines[i];
    if (line.indexOf('Raw result:') >= 0) {
      return lines[i + 1];
    }
  }
};

decode = function(stream, options, callback) {
  var opt;
  if (options == null) {
    options = {};
  }
  if (!_.isFunction(callback)) {
    debuglog('[decode] callback isnt a function. cancel');
    return;
  }
  if (!IS_JAVA_INSTALLED) {
    callback('java is not installed');
    return;
  }
  if (!((stream != null) && Buffer.isBuffer(stream))) {
    callback("invalid uri:" + uri);
    return;
  }
  opt = {
    bucket: options.bucket || OSS_BUCKET,
    object: "" + options.object,
    source: stream
  };
  return OssClient.putObject(opt, function(err, ref) {
    var cmd, uri;
    if (err != null) {
      return callback(err);
    }
    uri = "" + HTTP_PREFIX + options.object + ALI_IMG_CMD;
    cmd = "java -cp " + JAR_SET_PATH + " " + JAR_ENTRY_POINT + " " + uri + " --try_harder";
    debuglog("[decode] cmd to be exec:" + cmd);
    return exec(cmd, {
      silent: true
    }, function(code, stdout, stderr) {
      var errorCache, qrcode;
      debuglog("[parse result] attemp 2 code:" + code + ", stdout:" + stdout + ", stderr:" + stderr);
      if (code) {
        errorCache = "ERROR: code:" + code + ", err:" + stderr;
      } else {
        qrcode = readResultFromStdout(stdout);
      }
      return callback(errorCache, qrcode);
    });
  });
};

copy = function(options, callback) {
  var opt;
  if (options == null) {
    options = {};
  }
  opt = {
    sourceBucket: options.sourceBucket || OSS_BUCKET,
    sourceObject: options.sourceObject,
    bucket: options.bucket || OSS_BUCKET,
    object: options.object
  };
  return OssClient.copyObject(opt, function(err, res) {
    return callback(err, res);
  });
};

module.exports = {
  init: init,
  decode: decode,
  copy: copy
};
